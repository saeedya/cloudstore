# .github/workflows/test.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Add environment-specific configuration
    strategy:
      matrix:
        include:
          - branch: main
            environment: production
            secret_prefix: PROD
            db_name: cloud_store_prod
          - branch: staging
            environment: staging
            secret_prefix: STAGING
            db_name: cloud_store_staging
          - branch: develop
            environment: development
            secret_prefix: DEV
            db_name: cloud_store_dev
    
    environment: ${{ matrix.environment }}
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets[format('{0}_MYSQL_ROOT_PASSWORD', matrix.secret_prefix)] }}
          MYSQL_DATABASE: ${{ matrix.db_name }}
          MYSQL_USER: ${{ secrets[format('{0}_MYSQL_USER', matrix.secret_prefix)] }}
          MYSQL_PASSWORD: ${{ secrets[format('{0}_MYSQL_PASSWORD', matrix.secret_prefix)] }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/test.txt
    
    - name: Wait for MySQL
      run: |
        timeout 20 bash -c "until mysql -h 127.0.0.1 -u ${{ secrets[format('{0}_MYSQL_USER', matrix.secret_prefix)] }} -p${{ secrets[format('{0}_MYSQL_PASSWORD', matrix.secret_prefix)] }} -e 'SELECT 1'; do sleep 1; done"
    
    - name: Run tests
      env:
        FLASK_ENV: ${{ matrix.environment }}
        DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', matrix.secret_prefix)] }}
        SECRET_KEY: ${{ secrets[format('{0}_SECRET_KEY', matrix.secret_prefix)] }}
        JWT_SECRET_KEY: ${{ secrets[format('{0}_JWT_SECRET_KEY', matrix.secret_prefix)] }}
      run: |
        python -m pytest -v --cov=app --cov-report=xml tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.environment }}
        fail_ci_if_error: true

  build-and-push:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_CLOUD_STORE }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ${{ github.ref == 'refs/heads/main' && format('ghcr.io/{0}:latest', github.repository) || '' }}